* *Things to do*

** TODO Programmation

*** TODO Model Programming

**** DONE enum Constraint


**** DONE enum DataType


**** TODO class Attribute
***** DONE javadoc
***** DONE junit
***** DONE java
***** TODO ant

      
**** TODO class Table
***** DONE javadoc
***** DONE junit
***** DONE java
***** TODO ant


**** TODO class Database
***** DONE javadoc
***** DONE junit
***** DONE java
***** TODO ant


**** TODO class Server
***** DONE javadoc
***** TODO junit
***** TODO java
***** TODO ant      
           

*** TODO View Programming



*** TODO Controller Programming




** TODO Rendre
   SCHEDULED: <2006-06-28 mer.>


   
** TODO Presentation
   SCHEDULED: <2017-06-29 jeu.>
   

   
   
* Remarque
- N'oublie pas java, javadoc, junit et ent.
- Pour la class Attribute, verifier que les constraint ajoutes au column soient capables de verifier les valeurs avant le constraint
- Les attribute NUMBER ajoute sera changer a String pour verifier la longueur
- Add the deleteTable()
- Delete the Tuple()
- Set table name
- Table dans Database est geree par HashMap
- Les checks doivent etre ajoutes pendant la creation du table
- Watch the ReferenceKey (Change)
- Date >= : After <= Sooner 
- Always create subclass

* Changes
** DONE add length of an attribute

** Probleme : Les cles etrangers sont des attributs qui peuvent etre assosies par les tables differents
*** TODO Class Table ? 
*** TODO Class Attributs ?
- En passant par parametre les attributs, on a deja recuperer les cles etranger.
- A priori, c'est un peu inutile de passer par table. Car en fait, ca serait plus complique de le realiser le truc
le truc. On peut gerer les attributs d'une cle etrangere en Vue.
- Il ne faut pas des changement des attributs depuis une autre table.

** Check if the reference key has the same typeor not

* *Contenu du rendu*

** Rapport au format PDF						
- présentation de l'organisation du projet : planification et répartition des tâches au sein du groupe
- mise à jour des diagrammes présentés dans le rapport d'analyse, accompagnée des justifications nécessaires
- description des choix techniques et algorithmiques
- diagramme de classes d'implémentation obtenu par rétro-conception
- description de la campagne de tests effectuée   
- état d'avancement réel du développement, à comparer avec les objectifs annoncés dans le cahier d'analyse
- synthèse des difficultés rencontrées et des solutions apportées
- bilan personnel du travail réalisé

**   Archive (contenant l'arborescence entière de l'espace de développement bien structuré)
- les sources des classes développées et de leurs tests
- les sources des documents rendus
- l'archive jar qui permet de lancer le projet
- la javadoc de votre application
- le fichier build.xml qui permet de construire l'application
- une notice d'installation/lancement (readme.txt)
- un manuel utilisateur

* Reflection !!!@!
